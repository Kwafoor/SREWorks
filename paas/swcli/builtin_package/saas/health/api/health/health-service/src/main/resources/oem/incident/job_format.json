{
  "id": 115,
  "gmtCreate": 1646719784182,
  "gmtModified": 1646719888577,
  "creator": "999999999",
  "operator": "999999999",
  "appId": "",
  "name": "oem_{{appName}}_pod_status_diagnosis",
  "alias": "{{appName}}应用POD状态异常诊断作业(内置)",
  "tags": ["pod_status", "diagnosis", "{{appName}}"],
  "description": "{{appName}}应用POD状态异常诊断作业",
  "options": null,
  "triggerType": null,
  "triggerConf": null,
  "scheduleType": "serial",
  "scheduleConf": {
    "taskIdList": [{
      "id": 217,
      "gmtCreate": 1646719878089,
      "gmtModified": 1646721491187,
      "creator": "999999999",
      "operator": "999999999",
      "appId": "",
      "name": "oem_{{appName}}_pod_status_unready",
      "alias": "{{appName}}应用POD状态异常(内置)",
      "execTimeout": 600,
      "execType": "python",
      "execContent": "# coding: utf-8\n\nimport os\nimport json\nimport time\nimport random\nimport requests\n\nheaders = {}\nhost = {\n    \"dataset\": \"http://prod-dataops-dataset.sreworks-dataops.svc.cluster.local:80\"\n}\n\ndemo_app_id = \"{{appId}}\"\n\npage_size = 1000\none_second_millisecond = 1000\none_minute_millisecond = 60000\n\n\n# 五种状态\n# WAITING 等待自愈状态\n# RUNNING 自愈中\n# FAILURE 自愈失败\n# SUCCESS 自愈成功\n# CANCEL 自愈任务取消\n\n\ndef _do_get_app_pod_status(endpoint, start_timestamp, end_timestamp, app_id, app_instance_id):\n    basic_url = f'''{endpoint}?sTimestamp={start_timestamp}&eTimestamp={end_timestamp}&appId={app_id}&appInstanceId={app_instance_id}&pageSize={page_size}'''\n    page_num = 1\n    datas = []\n    while True:\n        url = basic_url + \"&pageNum=\" + str(page_num)\n        r = requests.get(url, headers=headers)\n        if r.status_code != 200:\n            break\n\n        ret = r.json().get(\"data\", None)\n        if ret and ret.get(\"datas\"):\n            datas.extend(ret.get(\"datas\"))\n            _total_num = int(ret.get(\"totalNum\"))\n            _page_size = int(ret.get(\"pageSize\"))\n            _page_num = int(ret.get(\"pageNum\"))\n            if _page_size > _total_num:\n                break\n            else:\n                page_num = _page_num + 1\n        else:\n            break\n\n    return datas\n\n\ndef build_self_healing_instance(app_id):\n    incident_instance = json.loads(open(os.getenv(\"varConfPath\")).read())\n\n    # 用户按需实现自愈逻辑\n    random_int = random.randint(150, 300)\n    time.sleep(random_int)\n\n    now_millisecond = int(time.time()) * one_second_millisecond\n    current_minute_timestamp = now_millisecond - now_millisecond % one_minute_millisecond\n    end_timestamp = current_minute_timestamp - one_minute_millisecond\n    start_timestamp = end_timestamp - one_minute_millisecond\n\n    endpoint_pod_status = host[\"dataset\"] + \"/interface/app_pod_status\"\n    app_instance_id = incident_instance[\"appInstanceId\"]\n    app_pod_status_list = _do_get_app_pod_status(endpoint_pod_status, start_timestamp, end_timestamp, app_id, app_instance_id)\n\n    unready_pods = []\n    for app_pod in app_pod_status_list:\n        ready_str = app_pod[\"podReady\"].lower()\n        if ready_str != \"true\":\n            unready_pods.append(app_pod)\n\n    if len(unready_pods) < 1:\n        incident_instance[\"selfHealingStatus\"] = \"SUCCESS\"\n    else:\n        incident_instance[\"selfHealingStatus\"] = \"FAILURE\"\n        unready_pod_cnt = len(unready_pods)\n        unready_pods_str = \"\"\n        for unready_pod in unready_pods:\n            unready_pods_str += \",\" + unready_pod[\"podName\"]\n        incident_instance[\"cause\"] = f'''应用POD自愈失败,异常POD实例数[{unready_pod_cnt}],列表[{unready_pods_str}]'''\n    return incident_instance\n\n\ndef incident(app_id):\n    current_instance = build_self_healing_instance(app_id)\n    result = {\n        \"currentIncident\": current_instance\n    }\n    open(os.getenv(\"varConfPath\"), 'w').write(json.dumps(result))\n    print(json.dumps(result))\n\n\nincident(demo_app_id)\n",
      "execRetryTimes": 0,
      "execRetryInterval": 0,
      "varConf": {},
      "sceneType": "incident",
      "sceneConf": {}
    }]
  },
  "sceneType": "incident",
  "sceneConf": {},
  "varConf": {},
  "notifyConf": null,
  "eventConf": [{
    "source": "INCIDENT",
    "type": "KAFKA",
    "config": {
      "server": "sreworks-kafka.sreworks:9092",
      "topics": ["sreworks-health-incident-{{incidentDefinitionId}}"]
    }
  }]
}