{
  "id": 95,
  "gmtCreate": 1646306448766,
  "gmtModified": 1646306448766,
  "creator": "",
  "operator": "",
  "appId": "",
  "name": "oem_{{appName}}_pod_event_collect",
  "alias": "{{appName}}应用POD事件明细采集作业(内置)",
  "tags": ["{{appName}}", "pod", "event"],
  "description": null,
  "options": null,
  "triggerType": "cron",
  "triggerConf": {
    "cronExpression": "20 0/5 * * * ? *",
    "enabled": true
  },
  "scheduleType": "serial",
  "scheduleConf": {
    "taskIdList": [{
      "id": 109,
      "gmtCreate": 1646306448757,
      "gmtModified": 1646306448757,
      "creator": "",
      "operator": "",
      "appId": "",
      "name": "oem_{{appName}}_pod_event",
      "alias": "{{appName}}应用POD事件明细(内置)",
      "execTimeout": 300,
      "execType": "python",
      "execContent": "# coding: utf-8\n\nimport datetime\nimport json\nimport time\nimport requests\n\nheaders = {}\n\npage_size = 1000\none_millisecond = 1000\nfive_minutes_millisecond = 300000\none_hour_minutes_millisecond = 3600000\n\nhost = {\n    \"dataset\": \"http://prod-dataops-dataset.sreworks-dataops.svc.cluster.local:80\",\n    \"health\": \"http://prod-health-health.sreworks.svc.cluster.local:80\",\n    \"app\": \"http://prod-app-app.sreworks.svc.cluster.local:80\"\n}\n\ndemo_app_id = \"{{appId}}\"\ndemo_app_name = \"{{appName}}\"\nevent_definition_name = \"{{podEventDefinitionName}}\"\n\n\ndef convert_utc_to_local_dt(gmt_ts):\n    print(datetime.datetime.fromtimestamp(gmt_ts, tzinfo=datetime.timezone.utc))\n\n\ndef get_time_range(ts, delta_ts, forward_gap=0):\n    \"\"\"\n    时间范围\n    :param ts:\n    :param delta_ts:\n    :param forward_gap: 默认前推一个delta\n    :return:\n    \"\"\"\n    ts_integer = int(ts)\n    delta_ts_integer = int(delta_ts)\n\n    end_ts = ts_integer - ts_integer % delta_ts_integer\n    start_ts = end_ts - delta_ts_integer\n\n    delta_forward_ts_integer = delta_ts_integer * forward_gap\n\n    return start_ts - delta_forward_ts_integer, end_ts - delta_forward_ts_integer\n\n\ndef get_pod_events():\n    endpoint = host[\"dataset\"] + \"/interface/pod_event\"\n    start_timestamp, end_timestamp = get_time_range(time.time() * one_millisecond, five_minutes_millisecond)\n    basic_url = f'''{endpoint}?sTimestamp={start_timestamp}&eTimestamp={end_timestamp}&pageSize={page_size}'''\n\n    page_num = 1\n    datas = []\n    while True:\n        url = basic_url + \"&pageNum=\" + str(page_num)\n        r = requests.get(url, headers=headers)\n        if r.status_code != 200:\n            break\n\n        ret = r.json().get(\"data\", None)\n        if ret and ret.get(\"datas\"):\n            datas.extend(ret.get(\"datas\"))\n            _total_num = int(ret.get(\"totalNum\"))\n            _page_size = int(ret.get(\"pageSize\"))\n            _page_num = int(ret.get(\"pageNum\"))\n            if _page_size > _total_num:\n                break\n            else:\n                page_num = _page_num + 1\n        else:\n            break\n\n    return datas\n\n\ndef get_app_pods(app_id, app_name):\n    endpoint = host[\"dataset\"] + \"/interface/app_pod\"\n    end_timestamp = int(time.time() * one_millisecond)\n    start_timestamp = end_timestamp - one_hour_minutes_millisecond\n    basic_url = f'''{endpoint}?sTimestamp={start_timestamp}&eTimestamp={end_timestamp}&appId={app_id}&pageSize={page_size}'''\n\n    page_num = 1\n    datas = []\n    while True:\n        url = basic_url + \"&pageNum=\" + str(page_num)\n        r = requests.get(url, headers=headers)\n        if r.status_code != 200:\n            break\n\n        ret = r.json().get(\"data\", None)\n        if ret and ret.get(\"datas\"):\n            datas.extend(ret.get(\"datas\"))\n            _total_num = int(ret.get(\"totalNum\"))\n            _page_size = int(ret.get(\"pageSize\"))\n            _page_num = int(ret.get(\"pageNum\"))\n            if _page_size > _total_num:\n                break\n            else:\n                page_num = _page_num + 1\n        else:\n            break\n\n    app_pods = {}\n    for data in datas:\n        key = data[\"namespace\"] + \"#\" + data[\"podName\"]\n        # data['podName'] = data['podName']\n        data['appId'] = app_id\n        data['appName'] = app_name\n        data['appComponentName'] = data['appComponentName']\n        data['appInstanceId'] = data['appInstanceId']\n        data['appComponentInstanceId'] = data['appInstanceId']\n        app_pods[key] = data\n    return app_pods\n\n\ndef get_app_event_definition(app_id, definition_name):\n    endpoint = host[\"health\"] + \"/definition/getDefinitions?category=event&appId=\" + app_id + \"&name=\" + definition_name\n    r = requests.get(endpoint, headers=headers)\n    app_event_definitions = r.json().get(\"data\", None)\n    # 仅取一个应用定义\n    if app_event_definitions:\n        return app_event_definitions[0]\n    else:\n        return None\n\n\ndef push_event_instance(def_id, event_instances):\n    endpoint = host[\"health\"] + \"/event_instance/pushEvents\"\n    url = f'''{endpoint}?defId={def_id}'''\n\n    r = requests.post(url, headers=headers, json=event_instances)\n    if r.status_code != 200:\n        print(r.json())\n\n\ndef sync(app_id, app_name, definition_name):\n    app_event_definition = get_app_event_definition(app_id, definition_name)\n    if app_event_definition:\n        app_pods = get_app_pods(app_id, app_name)\n        events = get_pod_events()\n\n        app_component_event_instances = {}\n        if app_pods and events:\n            for event in events:\n                key = event[\"namespace\"] + \"#\" + event[\"podName\"]\n                pod = app_pods.get(key, None)\n                if pod is not None:\n                    event[\"occurTs\"] = event[\"gmtOccur\"]\n                    event[\"timestamp\"] = int(time.time() * one_millisecond)\n                    event['appId'] = pod['appId']\n                    event['appName'] = pod['appName']\n                    event['appComponentName'] = pod['appComponentName']\n                    event['appInstanceId'] = pod['appInstanceId']\n                    event['appComponentInstanceId'] = pod['appInstanceId']\n                    event['content'] = event['message']\n                    event['source'] = \"POD事件采集\"\n\n                    key = pod['appId'] + \"#\" + pod['appComponentName']\n                    if key in app_component_event_instances:\n                        app_component_event_instances[key].append(event)\n                    else:\n                        app_component_event_instances[key] = [event]\n\n        results = []\n        for app_component, event_instances in app_component_event_instances.items():\n            push_event_instance(app_event_definition['id'], event_instances)\n            results.extend(event_instances)\n        return results\n\n\nprint(json.dumps(sync(demo_app_id, demo_app_name, event_definition_name)))\n",
      "execRetryTimes": 0,
      "execRetryInterval": 0,
      "varConf": {},
      "sceneType": "collect",
      "sceneConf": {
        "isPushQueue": "false",
        "syncDw": "true",
        "id": {{eventInstanceModelId}},
        "type": "model",
        "layer": "{{eventInstanceModelLayer}}"
      }
    }]
  },
  "sceneType": "collect",
  "sceneConf": {},
  "varConf": {},
  "notifyConf": null,
  "eventConf": []
}