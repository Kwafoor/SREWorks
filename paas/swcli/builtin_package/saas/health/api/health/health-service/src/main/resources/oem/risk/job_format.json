{
  "id": 100,
  "gmtCreate": 1646658291473,
  "gmtModified": 1646658301348,
  "creator": "999999999",
  "operator": "999999999",
  "appId": "",
  "name": "oem_{{appName}}_pod_status_inspection",
  "alias": "{{appName}}应用PDO状态巡检作业(内置)",
  "tags": ["pod_status", "{{appName}}"],
  "description": "{{appName}}应用PDO状态巡检作业",
  "options": null,
  "triggerType": "cron",
  "triggerConf": {
    "cronExpression": "2 * * * * ? *",
    "enabled": true
  },
  "scheduleType": "serial",
  "scheduleConf": {
    "taskIdList": [{
      "id": 156,
      "gmtCreate": 1646658041535,
      "gmtModified": 1646659825821,
      "creator": "999999999",
      "operator": "999999999",
      "appId": "",
      "name": "oem_{{appName}}_pod_status",
      "alias": "{{appName}}应用POD状态(内置)",
      "execTimeout": 300,
      "execType": "python",
      "execContent": "# coding: utf-8\nimport json\nimport time\nimport requests\n\nheaders = {}\nhost = {\n    \"dataset\": \"http://prod-dataops-dataset.sreworks-dataops.svc.cluster.local:80\"\n}\n\n\ndemo_app_id = \"{{appId}}\"\n\npage_size = 1000\none_second_millisecond = 1000\none_minute_millisecond = 60000\n\n\ndef _do_get_app_pod_status(endpoint, start_timestamp, end_timestamp, app_id):\n    basic_url = f'''{endpoint}?sTimestamp={start_timestamp}&eTimestamp={end_timestamp}&appId={app_id}&pageSize={page_size}'''\n    page_num = 1\n    datas = []\n    while True:\n        url = basic_url + \"&pageNum=\" + str(page_num)\n        r = requests.get(url, headers=headers)\n        if r.status_code != 200:\n            break\n\n        ret = r.json().get(\"data\", None)\n        if ret and ret.get(\"datas\"):\n            datas.extend(ret.get(\"datas\"))\n            _total_num = int(ret.get(\"totalNum\"))\n            _page_size = int(ret.get(\"pageSize\"))\n            _page_num = int(ret.get(\"pageNum\"))\n            if _page_size > _total_num:\n                break\n            else:\n                page_num = _page_num + 1\n        else:\n            break\n\n    return datas\n\n\ndef risk(app_id):\n    now_millisecond = int(time.time()) * one_second_millisecond\n    current_minute_timestamp = now_millisecond - now_millisecond % one_minute_millisecond\n    end_timestamp = current_minute_timestamp - one_minute_millisecond\n    start_timestamp = end_timestamp - one_minute_millisecond\n\n    endpoint_pod_status = host[\"dataset\"] + \"/interface/app_pod_status\"\n    app_pod_status_list = _do_get_app_pod_status(endpoint_pod_status, start_timestamp, end_timestamp, app_id)\n\n    risk_instances = []\n    app_instance_ids = set([])\n    for app_pod_status in app_pod_status_list:\n        app_instance_id = app_pod_status[\"appInstanceId\"]\n        ready_str = app_pod_status[\"podReady\"].lower()\n        if ready_str != \"true\":\n            if app_instance_id in app_instance_ids:\n                continue\n            else:\n                risk_instance = {\n                    \"appInstanceId\": app_instance_id,\n                    \"appComponentInstanceId\": app_pod_status[\"appComponentInstanceId\"],\n                    \"gmt_occur\": start_timestamp,\n                    \"source\": \"POD状态作业巡检\",\n                    \"content\": app_pod_status[\"podName\"] + \" POD状态未就绪\"\n                }\n                risk_instances.append(risk_instance)\n                app_instance_ids.add(app_instance_id)\n\n    return risk_instances\n\n\nprint(json.dumps(risk(demo_app_id)))\n",
      "execRetryTimes": 0,
      "execRetryInterval": 0,
      "varConf": {},
      "sceneType": "risk",
      "sceneConf": {
        "modelId": {{riskDefinitionId}}
      }
    }]
  },
  "sceneType": "risk",
  "sceneConf": {},
  "varConf": {},
  "notifyConf": null,
  "eventConf": []
}