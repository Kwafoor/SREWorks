import groovy.json.JsonOutput

def PROJECT_NAME = (env.JOB_NAME.tokenize('/') as String[])[0]
def BRANCH = env.BRANCH_NAME
def OSS_STORAGE_HOST = env.OSS_STORAGE_HOST
def OSS_ACCESS_KEY_ID = env.OSS_ACCESS_KEY_ID
def OSS_ACCESS_KEY_SECRET = env.OSS_ACCESS_KEY_SECRET
def REPO = scm.getUserRemoteConfigs()[0].getUrl()

pipeline {
    options {
        disableConcurrentBuilds()
    }
    triggers {
        pollSCM('* * * * *')
    }
    agent any
    parameters {
        string(name: 'X86_OSSUTIL_URL', defaultValue: 'http://gosspublic.alicdn.com/ossutil/1.6.10/ossutil64', description: '')
        // string(name: 'ARM_OSSUTIL_URL', defaultValue: 'http://gosspublic.alicdn.com/ossutil/1.6.13/ossutilarm64?spm=a2c4g.11186623.2.18.5ae1448adotpSU', description: '')
    }
    stages {
        stage("Clone Repo") {
            steps {
                git credentialsId: "$GIT_CREDENTIAL",
                    url: REPO,
                    branch: BRANCH
            }
        }
        stage("Build & Push Images") {
            steps {
                script {
                    x86AppImage = docker.build("reg.docker.alibaba-inc.com/abm-aone/swcli", "--pull --no-cache --build-arg OSSUTIL_URL=${params.X86_OSSUTIL_URL} --build-arg OSS_STORAGE_HOST=$OSS_STORAGE_HOST --build-arg OSS_ACCESS_KEY_ID=$OSS_ACCESS_KEY_ID --build-arg OSS_ACCESS_KEY_SECRET=$OSS_ACCESS_KEY_SECRET -f ./Dockerfile .")
                    docker.withRegistry(REGISTRY, REGISTRY_CREDENTIAL) { x86AppImage.push()}
                }
            }
        }
    }
}
