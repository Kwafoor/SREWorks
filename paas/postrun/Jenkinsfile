def PROJECT_NAME = (env.JOB_NAME.tokenize('/') as String[])[0]
def BRANCH = env.BRANCH_NAME
def REPO = scm.getUserRemoteConfigs()[0].getUrl()
def TEST_RESULT

pipeline {
    options {
        disableConcurrentBuilds()
    }
    triggers {
        pollSCM('*/2 * * * *')
    }
    agent any
    stages {
        stage("Clone Repo") {
            steps {
                git credentialsId: "$GIT_CREDENTIAL",
                    url: REPO,
                    branch: BRANCH
            }
        }
        stage("Build & Push Images") {
            agent any
            when {
                branch 'master'
            }
            steps {
                script {
                    x86ApplicationImage = docker.build("reg.docker.alibaba-inc.com/abm-aone/postrun", "--pull --no-cache -f ./Dockerfile .")
                    docker.withRegistry(REGISTRY, REGISTRY_CREDENTIAL) {
                        x86ApplicationImage.push()
                    }
                    armApplicationImage = docker.build("reg.docker.alibaba-inc.com/abm-arm64v8/postrun", "--pull --no-cache -f ./Dockerfile.arm64v8 .")
                    docker.withRegistry(REGISTRY, REGISTRY_CREDENTIAL) {
                        armApplicationImage.push()
                    }
                }
            }
        }
    }
}
