import groovy.json.JsonOutput

def PROJECT_NAME = (env.JOB_NAME.tokenize('/') as String[])[0]
def BRANCH = env.BRANCH_NAME
def REPO = scm.getUserRemoteConfigs()[0].getUrl()
def TEST_RESULT

pipeline {
    options {
        disableConcurrentBuilds()
    }
    triggers {
        pollSCM('*/2 * * * *')
    }
    environment {
        IMAGE_PREFIX = "reg.docker.alibaba-inc.com/abm-aone/paas-gateway"
    }
    agent any
    parameters {
        string(name: 'MAVEN_X86_IMAGE', defaultValue: 'reg.docker.alibaba-inc.com/abm-aone/maven', description: '')
        string(name: 'MAVEN_ARM_IMAGE', defaultValue: 'reg.docker.alibaba-inc.com/abm-arm64v8/maven', description: '')
        string(name: 'JRE8_X86_IMAGE', defaultValue: 'reg.docker.alibaba-inc.com/abm-aone/openjdk8-jre', description: '')
        string(name: 'JRE8_ARM_IMAGE', defaultValue: 'reg.docker.alibaba-inc.com/abm-arm64v8/openjdk8-jre', description: '')
        string(name: 'X86_IMAGE_PREFIX', defaultValue: 'reg.docker.alibaba-inc.com/abm-aone/paas-gateway', description: '')
        string(name: 'ARM_IMAGE_PREFIX', defaultValue: 'reg.docker.alibaba-inc.com/abm-arm64v8/paas-gateway', description: '')
    }
    stages {
        stage("Clone Repo") {
            steps {
                git credentialsId: "$GIT_CREDENTIAL",
                    url: REPO,
                    branch: BRANCH
            }
        }
        stage("Build & Push Images") {
            agent any
            steps {
                parallel (
                    'x86': {
                        script {
                            retry(count: "${env.MAX_RETRY_COUNT}") {
                                sh "bash -c 'MAVEN_IMAGE=${params.MAVEN_X86_IMAGE} JRE8_IMAGE=${params.JRE8_X86_IMAGE}  envsubst \"\\\$MAVEN_IMAGE \\\$JRE8_IMAGE\" < Dockerfile.tpl > Dockerfile'"
                                x86ApplicationImage = docker.build("${params.X86_IMAGE_PREFIX}:$BRANCH", "--pull --no-cache --build-arg TAG=$BRANCH -f ./Dockerfile .")
                                docker.withRegistry(REGISTRY, REGISTRY_CREDENTIAL) { x86ApplicationImage.push()}
                            }
                        }
                    },
                    'arm': {
                        script {
                            retry(count: "${env.MAX_RETRY_COUNT}") {
                                sh "bash -c 'MAVEN_IMAGE=${params.MAVEN_ARM_IMAGE} JRE8_IMAGE=${params.JRE8_ARM_IMAGE}  envsubst \"\\\$MAVEN_IMAGE \\\$JRE8_IMAGE\" < Dockerfile.tpl > Dockerfile.arm64v8'"
                                armApplicationImage = docker.build("${params.ARM_IMAGE_PREFIX}:$BRANCH", "--pull --no-cache --build-arg TAG=$BRANCH -f ./Dockerfile.arm64v8 .")
                                docker.withRegistry(REGISTRY, REGISTRY_CREDENTIAL) { armApplicationImage.push()}
                            }
                        }
                    }
                 )
            }
        }
    }
    post {
        failure {
            script {
                def ownerPhones = JsonOutput.toJson("${OWNER_PHONE}".split(","))
                def ownerAt = "${OWNER_PHONE}".split(",").collect { "@$it" }.join(' ')
                def commitMessage = sh (script: 'git log -1 --format="%B" ${GIT_COMMIT}', returnStdout: true).trim()
                def commitAuthor = sh (script: 'git log -1 --format="%ae" ${GIT_COMMIT}', returnStdout: true).trim()
                def payload = """{
                    "markdown": {
                        "title": "构建失败 - ${PROJECT_NAME}",
                        "text": "### 构建失败 - ${PROJECT_NAME}\n\n * 仓库：${REPO}\n * 分支：${BRANCH}\n * 详情：${env.BUILD_URL}console\n * 提交记录：${commitMessage}\n * 作者：${commitAuthor}\n\n${ownerAt}"
                    },
                    "msgtype": "markdown",
                    "at": {
                        "atMobiles": ${ownerPhones},
                        "isAtAll": false
                    }
                }"""
                httpRequest contentType: 'APPLICATION_JSON_UTF8', httpMode: 'POST', requestBody: payload, url: "$DING_URL"
            }
        }
    }
}
