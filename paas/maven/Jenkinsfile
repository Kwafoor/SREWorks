def PROJECT_NAME = (env.JOB_NAME.tokenize('/') as String[])[0]
def BRANCH = env.BRANCH_NAME
def REPO = scm.getUserRemoteConfigs()[0].getUrl()
def TEST_RESULT

pipeline {
    options {
        disableConcurrentBuilds()
    }
    triggers {
        pollSCM('*/2 * * * *')
    }
    agent any
    parameters {
        string(name: 'JDK8_ARM_IMAGE', defaultValue: 'reg.docker.alibaba-inc.com/abm-arm64v8/openjdk8', description: '')
        string(name: 'X86_IMAGE_PREFIX', defaultValue: 'reg.docker.alibaba-inc.com/abm-aone/maven', description: '')
        string(name: 'ARM_IMAGE_PREFIX', defaultValue: 'reg.docker.alibaba-inc.com/abm-arm64v8/maven', description: '')
    }
    stages {
        stage("Clone Repo") {
            steps {
                git credentialsId: "$GIT_CREDENTIAL",
                    url: REPO,
                    branch: BRANCH
            }
        }
        stage('Render & Build & Push Dockerfile') {
            steps {
                sh "bash -c 'JDK8_IMAGE=${params.JDK8_ARM_IMAGE} envsubst \"\\\$JDK8_IMAGE\" < Dockerfile.tpl > Dockerfile'"
                script {
                    retry(count: "${env.MAX_RETRY_COUNT}") {
                        applicationImage = docker.build("${params.ARM_IMAGE_PREFIX}", "--pull --no-cache --build-arg TAG=$BRANCH -f ./Dockerfile .")
                        docker.withRegistry(REGISTRY, REGISTRY_CREDENTIAL) {
                            applicationImage.push()
                        }
                    }
                }
            }
        }
    }
}