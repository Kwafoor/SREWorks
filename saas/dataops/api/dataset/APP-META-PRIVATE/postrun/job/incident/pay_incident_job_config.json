[{
  "id": 34,
  "gmtCreate": 1645792314632,
  "gmtModified": 1645792314632,
  "creator": "",
  "operator": "",
  "appId": "",
  "name": "oem_user_pay_service_diagnosis",
  "alias": "用户交易服务诊断作业(内置)",
  "tags": ["user", "pay", "oem"],
  "description": "用户交易服务诊断作业(内置)",
  "options": null,
  "triggerType": null,
  "triggerConf": null,
  "scheduleType": "serial",
  "scheduleConf": {
    "taskIdList": [{
      "id": 173,
      "gmtCreate": 1645792314627,
      "gmtModified": 1646018576997,
      "creator": "",
      "operator": "999999999",
      "appId": "",
      "name": "oem_user_pay_service_unavailable",
      "alias": "用户交易服务不可用(内置)",
      "execTimeout": 600,
      "execType": "python",
      "execContent": "# coding: utf-8\n\nimport random\nimport time\nimport json\nimport os\n\n\n# 五种状态\n# WAITING 等待自愈状态\n# RUNNING 自愈中\n# FAILURE 自愈失败\n# SUCCESS 自愈成功\n# CANCEL 自愈任务取消\n\n\ndef build_self_healing_instance():\n    # gmtSelfHealingStart gmtSelfHealingEnd selfHealingStatus\n    incident_instance = json.loads(open(os.getenv(\"varConfPath\")).read())\n\n    # 等待状态异常表示需要进行自愈\n    if \"selfHealingStatus\" not in incident_instance or incident_instance[\"selfHealingStatus\"] in [\"WAITING\", \"RUNNING\"]:\n        incident_instance[\"gmtSelfHealingStart\"] = int(time.time())\n        time.sleep(20)  # mock自愈逻辑执行20s\n        incident_instance[\"gmtSelfHealingEnd\"] = int(time.time())\n        random_int = random.randint(1, 5)\n        if random_int == 1:\n            incident_instance[\"selfHealingStatus\"] = \"RUNNING\"\n        else:\n            incident_instance[\"selfHealingStatus\"] = \"SUCCESS\"\n    # 其他状态不需要处理\n\n    return incident_instance\n\n\ndef build_new_instance(app_instance_id):\n    new_incident_instance = {\n        \"appInstanceId\": app_instance_id,\n        \"appComponentInstanceId\": app_instance_id,\n        \"cause\": \"[用户交易服务异常诊断]鉴权服务异常引起交易服务异常,生成用户鉴权服务异常实例\"\n    }\n    return new_incident_instance\n\n\ndef incident():\n    current_instance = build_self_healing_instance()\n    # 自愈依赖新的异常实例\n    next_incident = build_new_instance(current_instance[\"appInstanceId\"]) if current_instance['selfHealingStatus'] == \"RUNNING\" else {}\n\n    result = {\n        \"currentIncident\": current_instance,\n        \"nextIncident\": next_incident\n    }\n    open(os.getenv(\"varConfPath\"), 'w').write(json.dumps(result))\n    print(json.dumps(result))\n\n\nincident()\n",
      "execRetryTimes": 0,
      "execRetryInterval": 0,
      "varConf": {},
      "sceneType": "incident",
      "sceneConf": {
        "modelId": 6
      }
    }]
  },
  "sceneType": "incident",
  "sceneConf": {},
  "varConf": {},
  "notifyConf": null,
  "eventConf": [{
    "source": "INCIDENT",
    "type": "KAFKA",
    "config": {
      "server": "sreworks-kafka.sreworks:9092",
      "topics": ["sreworks-health-incident-5"]
    }
  }]
}]